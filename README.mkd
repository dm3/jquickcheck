Providing a custom junit runner is mandatory as all of the @Test methods are
validated for being no-arg public void methods.
There is no way to test the test runner by using something like

    public class QuickCheckRunnerTest {
        @RunWith(QuickCheckRunner.class)
        public static class SimpleTest {
            @Test
            public void shouldRunTheTestWithNoArguments() {
                Assert.assertTrue(true);
            }
        }

        @Test
        public void runSimpleTest() throws InitializationError {
            Result result = JUnitCore.runClasses(SimpleTest.class);

            Assert.assertEquals(result.getFailureCount(), 0);
            Assert.assertEquals(result.getRunCount(), 1);
        }
    }

As the `Result` object returned by `JUnitCore` only knows if our runner has
been passed the test method, but not if it has actually invoked it.

    JUnitCore.runClasses(Test.class);

Is a shortcut for creating a runner and invoking it with a custom `RunNotifier`
containing a possibly custom `RunListener`.

## Dispatching on primitive types
To tell if a `java.lang.reflect.Type` (usually an instance of
`java.lang.Class`) represents a primitive, you need to compare it with a
special static `TYPE` variable on the respective primitive wrapper class
(`Double.TYPE`, ...).

## Features TODO
1. Generator instances in @Before and @BeforeClass blocks
2. Generator API - what we have in fj-test currently won't work as it's not really extensible
    * Use quickcheck from quickcheck.java.net
    * Ideally specifying generators should look like this:

    @Arb
    Generator<Integer> sizedInt = of(integer(), from(1), to(10))

    @Arb
    Generator<List<String>> listOfStrings = list(of(string(), alphanumeric()))

3. Dependencies between tests (ala JExample/jBehave/TestNG)
4. Automatic generator resolution according to types. Sensible defaults and generator registry.
5. Integrate with makeiteasy
6. Separate the project into 5 submodules:
    - JUnit
    - TestNG
    - FJ
    - java.net.QuickCheck
    - core
7. Add default generator resolution strategy discovery
8. FJ - allow both Gen and Arbitrary as generators?
9. Additional custom generator type resolution algorithms for javaNetQuickCheck and FJ (based on method return type?)
10. Integration with templates:
    - FJ: Some code generation will probably be needed to generate the Gen for the result of the template.
          All of the properties registered with `with` will have to be associated to some static registry and later,
          when the test method is executed will be bound (`Gen#bind`) to produce the `Gen<Result>`.
