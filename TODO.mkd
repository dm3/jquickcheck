## Features DONE
1. Generator instances in @Before and @BeforeClass blocks
    - Generators cannot be initialized in Before blocks in JUnit as Befores are
      applied to the Statement after it's generated by jcheck. This isn't
      impossible, just requires more work.
2. Generator API - what we have in fj-test currently won't work as it's not really extensible
    * Use quickcheck from quickcheck.java.net
    * Ideally specifying generators should look like this:

    @Arb
    Generator<Integer> sizedInt = of(integer(), from(1), to(10))

    @Arb
    Generator<List<String>> listOfStrings = list(of(string(), alphanumeric()))

This feature won't be implemented as jcheck relies on FJ/javaNetQuickCheck generators.
3. Separate the project into 5 submodules:
    - JUnit
    - TestNG
    - FJ
    - java.net.QuickCheck
    - core
Actually separated into even more very thin submodules
7. FJ - allow both Gen and Arbitrary as generators?
Only Arbitrary
4. Automatic generator resolution according to types. Sensible defaults and generator registry.
6. Add default generator resolution strategy discovery
10. Test project which will use quickcheck and codemodel to generate test classes and feed them back into jquickcheck.
    Wanted to use codemodel at first, but found out it's GPL'd. This wouldn't
    cause much trouble as it would only be used for testing purposes (no
    linking with codemodel in the released jars) but it would make the
    `jquickcheck-test` project GPL which doesn't really suit me.
Not sure if this brought any advantages. Had fun exploring javassist anyway.
NOTE: javassist doesn't support generics - patches? Fluent interface for class building?

## Features TODO
8. Additional custom generator type resolution algorithms for javaNetQuickCheck and FJ (based on method return type?)
9. Integration with templates (makeiteasy):
    - FJ: Some code generation will probably be needed to generate the Gen for the result of the template.
          All of the properties registered with `with` will have to be associated to some static registry and later,
          when the test method is executed, will be bound (`Gen#bind`) to produce the `Gen<Result>`.
11. strict mode: by default should be set to true. When true, no default
    generators should be used to satisfy properties.
12. Default generator resolution for Collections/Arrays
3. Dependencies between tests (ala JExample/jBehave/TestNG)
